datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/graphql/type-graphql"
}

model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  username             String                @unique
  phoneNumber          String?               @unique
  email                String                @unique
  name                 String
  logoUrl              String?
  verified             Boolean               @default(false)
  /// @TypeGraphQL.omit(output: true, input: true)
  password             String
  credentials          Credential[]
  presentations        Presentation[]
  presentationRequests PresentationRequest[]
  credentialRequests   CredentialRequest[]
  memberships          OrganizationMember[]
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
}

model Organization {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  name                  String                @default("Unnamed Organization")
  description           String?
  logoUrl               String?
  status                String                @default("unverified")
  issuedCredentials     Credential[]
  receivedPresentations Presentation[]
  credentialRequests    CredentialRequest[]
  presentationRequests  PresentationRequest[]
  memberships           OrganizationMember[]
  createdAt             DateTime?             @default(now())
  updatedAt             DateTime?             @updatedAt
}

model OrganizationMember {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  user                 User?                 @relation(fields: [userId], references: [id])
  userId               String?               @db.ObjectId
  role                 String?               @default("member")
  blocked              Boolean               @default(false)
  organization         Organization          @relation(fields: [organizationId], references: [id])
  organizationId       String                @db.ObjectId
  presentationRequests PresentationRequest[]
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
}

model Credential {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  type          String
  payload       Json
  issuerConsent Boolean            @default(false)
  holderConsent Boolean            @default(false)
  user          User               @relation(fields: [userId], references: [id])
  userId        String             @db.ObjectId
  issuer        Organization       @relation(fields: [issuerId], references: [id])
  issuerId      String             @db.ObjectId
  request       CredentialRequest? @relation(fields: [requestId], references: [id])
  requestId     String?            @unique @db.ObjectId
  expiryDate    DateTime           @db.Timestamp
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Presentation {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  type           String
  payload        Json
  issuerConsent  Boolean              @default(false)
  holderConsent  Boolean              @default(false)
  user           User                 @relation(fields: [userId], references: [id])
  userId         String               @db.ObjectId
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String               @db.ObjectId
  request        PresentationRequest? @relation(fields: [requestId], references: [id])
  requestId      String?              @unique @db.ObjectId
  expiryDate     DateTime             @db.Timestamp
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model CredentialRequest {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  issuer         Organization @relation(fields: [issuerId], references: [id])
  issuerId       String       @db.ObjectId
  credentialType String
  attributes     Json
  credential     Credential?
  status         String       @default("requested")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PresentationRequest {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  user                 User               @relation(fields: [userId], references: [id])
  userId               String             @db.ObjectId
  verifier             Organization       @relation(fields: [verifierId], references: [id])
  verifierId           String             @db.ObjectId
  requestedBy          OrganizationMember @relation(fields: [organizationMemberId], references: [id])
  organizationMemberId String             @db.ObjectId
  credentialType       String
  attributes           Json
  presentation         Presentation?
  status               String             @default("requested")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}
