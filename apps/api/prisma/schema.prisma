datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/graphql/type-graphql"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./entity-relation.svg"
}

model User {
  id                      String                @id @default(auto()) @map("_id") @db.ObjectId
  username                String                @unique
  did                     String?               @default("")
  phoneNumber             String?               @unique
  email                   String                @unique
  name                    String
  logoUrl                 String?
  status                  String                @default("unverified")
  /// @TypeGraphQL.omit(output: true, input: true)
  password                String
  deleted                 Boolean               @default(false)
  credentials             Credential[]
  presentations           Presentation[]
  presentationRequests    PresentationRequest[]
  credentialRequests      CredentialRequest[]
  memberships             OrganizationMember[]
  trustedOrganizations    Organization[]        @relation(fields: [trustedOrganizationsIds], references: [id])
  trustedOrganizationsIds String[]              @db.ObjectId
  createdAt               DateTime?             @default(now())
  updatedAt               DateTime?             @updatedAt
}

model Organization {
  id                        String                @id @default(auto()) @map("_id") @db.ObjectId
  name                      String                @default("Unnamed Organization")
  description               String?
  did                       String?               @default("")
  logoUrl                   String?
  status                    String                @default("unverified")
  issuedCredentials         Credential[]
  receivedPresentations     Presentation[]
  credentialRequests        CredentialRequest[]
  presentationRequests      PresentationRequest[]
  memberships               OrganizationMember[]
  allowedCredentialTypes    CredentialType[]      @relation(fields: [allowedCredentialTypesIds], references: [id])
  allowedCredentialTypesIds String[]              @db.ObjectId

  usersWhoTrust    User[]    @relation(fields: [usersWhoTrustIds], references: [id])
  usersWhoTrustIds String[]  @db.ObjectId
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
}

model OrganizationMember {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  user                 User?                 @relation(fields: [userId], references: [id])
  userId               String?               @db.ObjectId
  role                 String?               @default("member")
  blocked              Boolean               @default(false)
  organization         Organization          @relation(fields: [organizationId], references: [id])
  organizationId       String                @db.ObjectId
  presentationRequests PresentationRequest[]
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
}

model CredentialType {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  name                    String              @unique
  typename                String              @unique
  attributes              Json[]
  credentials             Credential[]
  requests                CredentialRequest[]
  createdAt               DateTime?           @default(now())
  updatedAt               DateTime?           @updatedAt
  allowedOrganizations    Organization[]      @relation(fields: [allowedOrganizationsIds], references: [id])
  allowedOrganizationsIds String[]            @db.ObjectId
}

model Credential {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  type          CredentialType     @relation(fields: [typeId], references: [id])
  typeId        String             @db.ObjectId
  payload       Json
  required      String[]           @default([])
  issuerConsent Boolean            @default(false)
  holderConsent Boolean            @default(false)
  user          User               @relation(fields: [userId], references: [id])
  userId        String             @db.ObjectId
  issuer        Organization       @relation(fields: [issuerId], references: [id])
  issuerId      String             @db.ObjectId
  request       CredentialRequest? @relation(fields: [requestId], references: [id])
  presentations Presentation[]
  requestId     String?            @unique @db.ObjectId
  expiryDate    DateTime           @db.Timestamp
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Presentation {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  allowedAccess  String[]             @default([])
  isPublic       Boolean              @default(false)
  credential     Credential           @relation(fields: [credentialId], references: [id])
  credentialId   String               @db.ObjectId
  holderConsent  Boolean              @default(false)
  signature      String?              @default("")
  user           User                 @relation(fields: [userId], references: [id])
  userId         String               @db.ObjectId
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String               @db.ObjectId
  request        PresentationRequest? @relation(fields: [requestId], references: [id])
  requestId      String?              @unique @db.ObjectId
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model CredentialRequest {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @db.ObjectId
  issuer           Organization   @relation(fields: [issuerId], references: [id])
  issuerId         String         @db.ObjectId
  credentialType   CredentialType @relation(fields: [credentialTypeId], references: [id])
  credentialTypeId String         @db.ObjectId
  credential       Credential?
  status           String         @default("pending")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model PresentationRequest {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  user                 User               @relation(fields: [userId], references: [id])
  userId               String             @db.ObjectId
  verifier             Organization       @relation(fields: [verifierId], references: [id])
  verifierId           String             @db.ObjectId
  requestedBy          OrganizationMember @relation(fields: [organizationMemberId], references: [id])
  organizationMemberId String             @db.ObjectId
  credentialType       String
  attributes           Json
  presentation         Presentation?
  status               String             @default("requested")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}
